version: 2.1
orbs:
  slack: circleci/slack@4.10.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS = $(curl --insecure https://kvdb.io/5QkEDmw6S9aSQMQpWgQJ6f/migration_${CIRCLE_WORKFLOW_ID:0:7})
            SUCCESS = 1
            if SUCCESS==1  
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
  install-dependencies:
    description: Install ansible, and aws cli
    steps:
      - run:
          name: update packages
          command: |
            sudo apt update
      - run:
          name: install pip
          command: |
            sudo apt install python3-pip
      - run:
          name: install ansible
          command: |
            python3 -m pip install --user ansible
      - run:
          name: Install aws cli
          command: |
            sudo curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            sudo unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: check python, node, pip, ansible and aws cli
          command: |
            tar --version
            node --version
            npm --version
            python3 --version
            python3 -m pip -V
            ansible --version
            aws --version

jobs:
  #-------- build phase --------
  build-frontend:
    docker:
      - image: circleci/node:13.8.0 #--- cimg/python:3.10.5-node
    steps:
      - checkout
      - restore_cache:
          keys:
            - node-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
      - run:
          name: build frontend
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          key: node-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
          paths:
            - ~/usr/local/lib/node_modules
  build-backend:
    docker:
      - image: circleci/node:13.8.0 #--- cimg/python:3.10.5-node
    steps:
      - checkout
      - restore_cache:
          keys:
            - node-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
      - run:
          name: build backend
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          key: node-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
          paths:
            - ~/usr/local/lib/node_modules
  #-------- test phase --------
  test-frontend:
    docker:
      - image: circleci/node:13.8.0 #--- cimg/python:3.10.5-node
    steps:
      - checkout
      - restore_cache:
          keys:
            - node-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
      - run:
          name: test frontend
          command: |
            cd frontend
            npm install
            npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0 #--- cimg/python:3.10.5-node
    steps:
      - checkout
      - restore_cache:
          keys:
            - node-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
      - run:
          name: test backend
          command: |
            cd backend
            npm install
            npm run test

  #-------- scan phase --------
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0 #--- cimg/python:3.10.5-node
    steps:
      - checkout
      - restore_cache:
          keys:
            - node-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
      - run:
          name: scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - node-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
      - run:
          name: scan backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
  #-------- deploy-infra phase --------
  deploy-infrastructure:
    docker:
      - image: cimg/aws:2022.06 #--- cimg/python:3.10.5-node
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=Udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=Udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=Udapeople" \
            --output text >> ~/project/.circleci/ansible/inventory.txt
            echo "---- cat inventory.txt"
            cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/project/.circleci/ansible
          paths:
            - inventory.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  #-------- config-infra phase --------
  configure-infrastructure:
    docker:
      - image: circleci/node:13.8.0
#      - image: ansible/ansible:default #--- cimg/python:3.10.5-node
    steps:
      - checkout
      - install-dependencies
      - add_ssh_keys:
          fingerprints: [ "b6:b7:70:85:58:3d:ec:3f:a3:60:26:5c:0e:84:0b:67" ]
      - attach_workspace:
          at: ~/project/.circleci/ansible
      - run:
          name: Configure server
          command: |
            echo "---- inventory.txt content "
            cat ~/project/.circleci/ansible/inventory.txt
            ansible-playbook -v -i ~/project/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  #-------- DB migration phase --------
  run-migrations:
    docker:
      - image: cimg/python:3.10.5-node  #--- circleci/node:13.8.0
    steps:
      - checkout
      - install-dependencies
      - restore_cache:
          keys:
            - node-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
      - run:
          name: Run migrations
          command: |
            cd backend
            echo "--- pwd ---"
            pwd
            echo "--- npm install ---"
            npm install
            echo "--- npm run migrations > migrations_dump.txt ---"
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            echo "workflow id " ${CIRCLE_WORKFLOW_ID:0:7}
            ls ~
            echo "-------------"
            ls ~/project -al
            echo "-------------"
            ls ~/project/backend
            echo "-------------"
            cat backend/migrations_dump.txt
            echo "-------------"
            if grep -q "has been executed successfully." backend/migrations_dump.txt
            then
              curl https://kvdb.io/5QkEDmw6S9aSQMQpWgQJ6f/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  #-------- deploy-frontend phase --------
  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0 #--- cimg/python:3.10.5-node
    # attach workspace
    steps:
      - checkout
      - install-dependencies
      - restore_cache:
          keys:
            - node-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=Udapeople" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${TYPEORM_HOST}"
            echo API_URL="http://54.88.91.205:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-${CIRCLE_WORKFLOW_ID:0:7}.tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
  #-------- deploy-backend phase --------
  deploy-backend:
    docker:
      - image: circleci/node:13.8.0 # ansible/ansible:default  #--- circleci/node:13.8.0 cimg/python:3.10.5-node
    environment:
      ENVIRONMENT: production
      TYPEORM_ENTITIES: "{{ lookup('env', 'TYPEORM_ENTITIES')}}"
      TYPEORM_MIGRATIONS: "{{ lookup('env', 'TYPEORM_MIGRATIONS')}}"
      TYPEORM_MIGRATIONS_DIR: "{{ lookup('env', 'TYPEORM_MIGRATIONS_DIR')}}"
      TYPEORM_CONNECTION: "{{ lookup('env', 'TYPEORM_CONNECTION')}}"
      TYPEORM_HOST: "{{ lookup('env', 'TYPEORM_HOST')}}"
      TYPEORM_PORT: 5432
      TYPEORM_USERNAME: "{{ lookup('env', 'TYPEORM_USERNAME')}}"
      TYPEORM_PASSWORD: "{{ lookup('env', 'TYPEORM_PASSWORD')}}"
      TYPEORM_DATABASE: "{{ lookup('env', 'TYPEORM_DATABASE')}}"
    steps:
      - checkout
      - install-dependencies
      - restore_cache:
          keys:
            - node-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
      - add_ssh_keys:
          fingerprints: [ "b6:b7:70:85:58:3d:ec:3f:a3:60:26:5c:0e:84:0b:67" ]
      - attach_workspace:
          at: ~/project/.circleci/ansible
      - run:
          name: deploy backend
          command: |
            echo "---- cat inventory.txt"
            cat ~/project/.circleci/ansible/inventory.txt
            cd ~/project/.circleci/ansible/
            ansible-playbook -v -i inventory.txt deploy-backend.yml
#            cd backend
#            echo "--- pwd ---"
#            pwd
#            echo "--- ---"
#            npm install
#            echo "--- npm run build ---"
#            npm run build
#            echo "--- cd .. ---"
#            cd ..
#            # Zip the directory
#            echo "--- pwd ---"
#            pwd
#            echo "--- tar -C backend -czvf artifact.tar.gz . ---"
#            tar -C backend -czvf artifact.tar.gz .
#            ls
#            cd .circleci/ansible
#            echo "Contents  of the inventory.txt file is -------"
#            cat inventory.txt
#            echo "--- ---"
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  smoke-test:
    docker:
      - image: circleci/node:13.8.0 #--- cimg/python:3.10.5-node
    steps:
      - checkout
      - install-dependencies
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=Udapeople" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  cloudfront-update:
    docker:
      - image: cimg/aws:2022.06
    steps:
      - checkout
      - run:
          name: Get old workflow id before gone
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text >> ~/project/.circleci/oldWorkflowID.txt
      - persist_to_workspace:
          root: ~/project/.circleci/
          paths:
            - oldWorkflowID.txt
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
  cleanup:
    docker:
      - image: cimg/aws:2022.06
    steps:
      - checkout
      - attach_workspace:
          at: ~/project/.circleci
      - run:
          name: remove old stack
          command: |
            export OldWorkflowID=$(cat ~/project/.circleci/oldWorkflowID.txt)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"         
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"  
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive --debug
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}" --debug
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}" --debug
            else
              echo "no env to delete"
            fi

workflows:
  default:
    jobs:
      - smoke-test
#      - build-frontend
#      - build-backend
#      - test-frontend:
#          requires:
#          - build-frontend
#      - test-backend:
#          requires:
#            - build-backend
#      - scan-frontend:
#          requires:
#            - build-frontend
#      - scan-backend:
#          requires:
#            - build-backend
#      - deploy-infrastructure:
#          requires:
#            - build-frontend
#            - build-backend
#            - test-frontend
#            - test-backend
#            - scan-frontend
#            - scan-backend
#          filters:
#            branches:
#              only:
#                - master
#      - deploy-infrastructure:
#          filters:
#            branches:
#              only:
#                - master
#      - configure-infrastructure:
#          requires:
#            - deploy-infrastructure
#          filters:
#            branches:
#              only:
#                - master
#      - run-migrations:
#          requires:
#            - configure-infrastructure
#          filters:
#            branches:
#              only:
#                - master
#      - deploy-frontend:
#          requires:
#            - run-migrations
#          filters:
#            branches:
#              only:
#                - master
#      - deploy-backend:
#          requires:
#            - run-migrations
#          filters:
#            branches:
#              only:
#                - master
#      - smoke-test:
#          requires:
#            - deploy-frontend
#            - deploy-backend
#          filters:
#            branches:
#              only:
#                - master
#      - cloudfront-update:
#          requires:
#            - smoke-test
#          filters:
#            branches:
#              only:
#                - master
#      - cleanup:
#          requires:
#            - cloudfront-update
#          filters:
#            branches:
#              only:
#                - master